import { create } from 'zustand';
import { db, Notification as DBNotification } from '../db';
import toast from 'react-hot-toast';

interface Notification {
  id: string;
  type: 'low_stock' | 'unpaid_transaction' | 'saved_order';
  title: string;
  message: string;
  data: any | null;
  read: boolean;
 createdAt: Date;
}

interface NotificationState {
  notifications: Notification[];
  unreadCount: number;
  
  addNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;
  markAsRead: (id: string) => void;
  markAllAsRead: () => void;
  deleteNotification: (id: string) => void;
  fetchNotifications: () => Promise<void>;
  showNotification: (notification: Omit<Notification, 'id' | 'createdAt' | 'read'>) => void;
  initializeNotifications: () => Promise<void>;
}

export const useNotificationStore = create<NotificationState>((set, get) => ({
  notifications: [],
  unreadCount: 0,
  
  addNotification: async (notificationData) => {
    const newNotification: DBNotification = {
      ...notificationData,
      id: '', // Will be auto-generated by DB
      read: false,
      createdAt: new Date(),
    };
    
    const id = await db.notifications.add(newNotification);
    
    const notification: Notification = { ...newNotification, id };
    
    set(state => ({
      notifications: [notification, ...state.notifications],
      unreadCount: state.unreadCount + 1,
    }));
  },
  
  markAsRead: async (id) => {
    await db.notifications.update(id, { read: true });
    
    set(state => ({
      notifications: state.notifications.map(n => 
        n.id === id ? { ...n, read: true } : n
      ),
      unreadCount: state.unreadCount > 0 ? state.unreadCount - 1 : 0,
    }));
  },
  
  markAllAsRead: async () => {
    const unreadNotifications = get().notifications.filter(n => !n.read);
    
    for (const notification of unreadNotifications) {
      await db.notifications.update(notification.id, { read: true });
    }
    
    set({
      notifications: get().notifications.map(n => ({ ...n, read: true })),
      unreadCount: 0,
    });
  },
  
  deleteNotification: async (id) => {
    await db.notifications.delete(id);
    
    set(state => ({
      notifications: state.notifications.filter(n => n.id !== id),
      unreadCount: state.unreadCount > 0 && state.notifications.find(n => n.id === id && !n.read) 
        ? state.unreadCount - 1 
        : state.unreadCount,
    }));
  },
  
  fetchNotifications: async () => {
    try {
      const dbNotifications = await db.notifications.orderBy('createdAt').reverse().toArray();
      const notifications = dbNotifications.map(dbNotif => ({
        ...dbNotif,
        createdAt: new Date(dbNotif.createdAt),
      }));
      
      const unreadCount = notifications.filter(n => !n.read).length;
      
      set({ notifications, unreadCount });
    } catch (error) {
      console.error('Error fetching notifications:', error);
    }
  },
  
  showNotification: (notificationData) => {
    // Add to store
    get().addNotification(notificationData);
    
    // Show toast notification
    const { title, message, type } = notificationData;
    
    switch (type) {
      case 'low_stock':
        toast.error(`${title}: ${message}`, {
          duration: 500,
          position: 'top-right',
        });
        break;
      case 'unpaid_transaction':
        toast(`${title}: ${message}`, {
          duration: 500,
          position: 'top-right',
        });
        break;
      case 'saved_order':
        toast.success(`${title}: ${message}`, {
          duration: 5000,
          position: 'top-right',
        });
        break;
      default:
        toast(`${title}: ${message}`, {
          duration: 5000,
          position: 'top-right',
        });
        break;
    }
 },
  
  initializeNotifications: async () => {
    await get().fetchNotifications();
  }
}));